apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: compositedatabaseinstances.crossplane.dfds.cloud
  labels:
    purpose: example
    provider: aws
spec:
  compositeTypeRef:
    apiVersion: crossplane.dfds.cloud/v1alpha1
    kind: CompositeDatabaseInstance
  patchSets:
  - name: metadata
    patches:
    - fromFieldPath: metadata.labels
    - fromFieldPath: metadata.annotations[crossplane.dfds.cloud/app-name]
  - name: external-name
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: metadata.annotations[crossplane.io/external-name]
      policy:
        fromFieldPath: Required
  resources:
  - name: securitygroup
    base:
      apiVersion: ec2.aws.crossplane.io/v1beta1
      kind: SecurityGroup
      spec:
        forProvider:
          region: eu-west-1
          # vpcIdSelector:
          #   matchControllerRef: true
          # groupName: rds-security-group
          description: Allow access to PostgreSQL
          ingress:
            - fromPort: 5432
              toPort: 5432
              ipProtocol: tcp
              ipRanges:
                - cidrIp: 0.0.0.0/0
                  description: postgresql
    patches:
    - fromFieldPath: "metadata.name"
      toFieldPath: "spec.forProvider.groupName"
      transforms:
      - type: string
        string:
          fmt: "%s-rds-security-group"      
  - name: rdinstance
    base:
      apiVersion: database.aws.crossplane.io/v1beta1
      kind: RDSInstance
      spec:
        forProvider:
          dbInstanceClass: db.t2.small
          engine: postgres
          masterUsername: masteruser
          skipFinalSnapshotBeforeDeletion: true
          vpcSecurityGroupIDSelector:
            matchControllerRef: true
        writeConnectionSecretToRef:
          namespace: crossplane-system
    patches:
    - type: PatchSet
      patchSetName: metadata          
    patches:
    - type: PatchSet
      patchSetName: metadata
    - fromFieldPath: "metadata.uid"
      toFieldPath: "spec.writeConnectionSecretToRef.name"
      transforms:
      - type: string
        string:
          fmt: "%s-databaseserver"
    - fromFieldPath: "spec.parameters.engineVersion"
      toFieldPath: "spec.forProvider.engineVersion"
    - fromFieldPath: "spec.parameters.region"
      toFieldPath: "spec.forProvider.region"
      transforms:
      - type: map
        map:
          eu-west-1: eu-west-1
    - fromFieldPath: "spec.parameters.allocatedStorage"
      toFieldPath: "spec.forProvider.allocatedStorage"
    connectionDetails:
    - fromConnectionSecretKey: username
    - fromConnectionSecretKey: password
    - name: hostname
      fromConnectionSecretKey: endpoint
    - type: FromValue
      name: port
      value: "5432"
    readinessChecks:
    - type: MatchString
      fieldPath: "status.atProvider.dbInstanceStatus"
      matchString: "available"
    # A CompositeMySQLInstance that uses this Composition will also be composed
    # of an Azure MySQLServerFirewallRule.
  # - name: firewallrule
  #   base:
  #     apiVersion: database.azure.crossplane.io/v1alpha3
  #     kind: MySQLServerFirewallRule
  #     spec:
  #       forProvider:
  #         resourceGroupNameSelector:
  #           matchControllerRef: true
  #         serverNameSelector:
  #           matchControllerRef: true
  #         properties:
  #           startIpAddress: 10.10.0.0
  #           endIpAddress: 10.10.255.254
  #           virtualNetworkSubnetIdSelector:
  #             name: sample-subnet
  #   patches:
  #   - type: PatchSet
  #     patchSetName: metadata

  # Some composite resources may be "dynamically provisioned" - i.e. provisioned
  # on-demand to satisfy an application's claim for infrastructure. The
  # writeConnectionSecretsToNamespace field configures the default value used
  # when dynamically provisioning a composite resource; it is explained in more
  # detail below.
  writeConnectionSecretsToNamespace: crossplane-system