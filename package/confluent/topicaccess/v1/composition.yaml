apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: xconfluenttopicaccessv1s.messaging.xplane.dfds.cloud
spec:
  compositeTypeRef:
    apiVersion: messaging.xplane.dfds.cloud/v1alpha1
    kind: XConfluentTopicAccessV1
  resources:
  - name: serviceaccount
    base:
      apiVersion: iam.confluent.crossplane.io/v1alpha1
      kind: ServiceAccount
      spec:
        forProvider:
          description: some description
        providerConfigRef:
          name: confluent-provider
    patches:
    - fromFieldPath: metadata.name
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.id
      toFieldPath: status.serviceaccountid
      policy:
        fromFieldPath: Required

  - name: apikey
    base:
      apiVersion: kubernetes.crossplane.io/v1alpha1
      kind: Object
      spec:
        references:
        - patchesFrom:
            apiVersion: v1
            kind: ConfigMap
            name: clusterid
          toFieldPath: spec.forProvider.resource
        - patchesFrom:
            apiVersion: v1
            kind: ConfigMap
            name: environmentid
          toFieldPath: spec.forProvider.environment
        forProvider:
          manifest:
            apiVersion: apikey.confluent.crossplane.io/v1alpha1
            kind: APIKey
            spec:
              forProvider:
                description: something
                serviceAccount:
              providerConfigRef:
                name: confluent-provider
              writeConnectionSecretToRef:
                name: confluent-apikey-samdi
                namespace: default
        providerConfigRef:
          name: kubernetes-provider
    patches:
    - fromFieldPath: metadata.name
    - fromFieldPath: spec.claimRef.namespace
      toFieldPath: spec.references[0].patchesFrom.namespace
    - fromFieldPath: spec.parameters.environment
      toFieldPath: spec.references[0].patchesFrom.fieldPath
      transforms:
      - type: string
        string:
          fmt: "data.%s"
    - fromFieldPath: spec.claimRef.namespace
      toFieldPath: spec.references[1].patchesFrom.namespace
    - fromFieldPath: spec.parameters.environment
      toFieldPath: spec.references[1].patchesFrom.fieldPath
      transforms:
      - type: string
        string:
          fmt: "data.%s"
    - type: FromCompositeFieldPath
      fromFieldPath: status.serviceaccountid
      toFieldPath: spec.forProvider.manifest.spec.forProvider.serviceAccount
      policy:
        fromFieldPath: Required


# # For root-id.*
# --- DONE
# # AclCreateDelete(serviceAccountIdAsInt, true, "WRITE", "", prefix)
# apiVersion: apiVersion: kafka.confluent.crossplane.io/v1alpha1
# kind: ACL
# metadata:
#   name: XXX
# spec:
#   forProvider:
#     environment: YYY
#     cluster: ZZZ
#     aclRule:
#       operation: WRITE
#       patternType: PREFIXED
#       permission: ALLOW
#       principal: "User:sa-0000"
#       resourceType: CONSUMER_GROUP
#       resourceName: rootId # maybe with a dot

  - name: acl-0
    base:
      apiVersion: messaging.xplane.dfds.cloud/v1alpha1
      kind: XConfluentTopicAccessACLV1
      spec:
        name: acl-0
        aclRule:
          operation: WRITE
          patternType: PREFIXED
          permission: ALLOW
          resourceType: GROUP
    patches:
    - fromFieldPath: spec.claimRef.deletionPolicy
      toFieldPath: spec.deletionPolicy
    - fromFieldPath: spec.claimRef.namespace # TODO
      toFieldPath: spec.namespace
    - fromFieldPath: spec.claimRef.namespace
      toFieldPath: spec.aclRule.resourceName
    - type: FromCompositeFieldPath
      fromFieldPath: status.serviceaccountid
      toFieldPath: spec.aclRule.principal
    - fromFieldPath: spec.parameters.environment
      toFieldPath: spec.environment

# ---
# # AclCreateDelete(serviceAccountIdAsInt, true, "CREATE", "", prefix)
# apiVersion: apiVersion: kafka.confluent.crossplane.io/v1alpha1
# kind: ACL
# metadata:
#   name: XXX
# spec:
#   forProvider:
#     environment: YYY
#     cluster: ZZZ
#     aclRule:
#       operation: CREATE
#       patternType: PREFIXED
#       permission: ALLOW
#       principal: "User:sa-0000"
#       resourceType: CONSUMER_GROUP
#       resourceName: rootId # maybe with a dot

  - name: acl-1
    base:
      apiVersion: messaging.xplane.dfds.cloud/v1alpha1
      kind: XConfluentTopicAccessACLV1
      spec:
        name: acl-1
        aclRule:
          operation: CREATE
          patternType: PREFIXED
          permission: ALLOW
          resourceType: GROUP
    patches:
    - fromFieldPath: spec.claimRef.deletionPolicy
      toFieldPath: spec.deletionPolicy
    - fromFieldPath: spec.claimRef.namespace
      toFieldPath: spec.namespace
    - fromFieldPath: spec.claimRef.namespace
      toFieldPath: spec.aclRule.resourceName
    - type: FromCompositeFieldPath
      fromFieldPath: status.serviceaccountid
      toFieldPath: spec.aclRule.principal
    - fromFieldPath: spec.parameters.environment
      toFieldPath: spec.environment


# # ---
# # AclCreateDelete(serviceAccountIdAsInt, true, "READ", "", prefix)
# apiVersion: apiVersion: kafka.confluent.crossplane.io/v1alpha1
# kind: ACL
# metadata:
#   name: XXX
# spec:
#   forProvider:
#     environment: YYY
#     cluster: ZZZ
#     aclRule:
#       operation: READ
#       patternType: PREFIXED
#       permission: ALLOW
#       principal: "User:sa-0000"
#       resourceType: CONSUMER_GROUP
#       resourceName: rootId # maybe with a dot

  - name: acl-2
    base:
      apiVersion: messaging.xplane.dfds.cloud/v1alpha1
      kind: XConfluentTopicAccessACLV1
      spec:
        name: acl-2
        aclRule:
          operation: READ
          patternType: PREFIXED
          permission: ALLOW
          resourceType: GROUP
    patches:
    - fromFieldPath: spec.claimRef.deletionPolicy
      toFieldPath: spec.deletionPolicy
    - fromFieldPath: spec.claimRef.namespace
      toFieldPath: spec.namespace
    - fromFieldPath: spec.claimRef.namespace
      toFieldPath: spec.aclRule.resourceName
    - type: FromCompositeFieldPath
      fromFieldPath: status.serviceaccountid
      toFieldPath: spec.aclRule.principal
    - fromFieldPath: spec.parameters.environment
      toFieldPath: spec.environment

# # For connect-rootid.*
# ---
# # AclCreateDelete(serviceAccountIdAsInt, true, "WRITE", "", $"connect-{prefix}")
# apiVersion: apiVersion: kafka.confluent.crossplane.io/v1alpha1
# kind: ACL
# metadata:
#   name: XXX
# spec:
#   forProvider:
#     environment: YYY
#     cluster: ZZZ
#     aclRule:
#       operation: WRITE
#       patternType: PREFIXED
#       permission: ALLOW
#       principal: "User:sa-0000"
#       resourceType: CONSUMER_GROUP
#       resourceName: connect-rootId # maybe with a dot


  - name: acl-3
    base:
      apiVersion: messaging.xplane.dfds.cloud/v1alpha1
      kind: XConfluentTopicAccessACLV1
      spec:
        name: acl-3
        aclRule:
          operation: WRITE
          patternType: PREFIXED
          permission: ALLOW
          resourceType: GROUP
    patches:
    - fromFieldPath: spec.claimRef.deletionPolicy
      toFieldPath: spec.deletionPolicy
    - fromFieldPath: spec.claimRef.namespace
      toFieldPath: spec.namespace
    - fromFieldPath: spec.claimRef.namespace
      toFieldPath: spec.aclRule.resourceName
      transforms:
      - type: string
        string:
          fmt: "connect-%s"
    - type: FromCompositeFieldPath
      fromFieldPath: status.serviceaccountid
      toFieldPath: spec.aclRule.principal
    - fromFieldPath: spec.parameters.environment
      toFieldPath: spec.environment

# ---
# # AclCreateDelete(serviceAccountIdAsInt, true, "CREATE", "", $"connect-{prefix}")
# apiVersion: apiVersion: kafka.confluent.crossplane.io/v1alpha1
# kind: ACL
# metadata:
#   name: XXX
# spec:
#   forProvider:
#     environment: YYY
#     cluster: ZZZ
#     aclRule:
#       operation: CREATE
#       patternType: PREFIXED
#       permission: ALLOW
#       principal: "User:sa-0000"
#       resourceType: CONSUMER_GROUP
#       resourceName: connect-rootId # maybe with a dot

  - name: acl-4
    base:
      apiVersion: messaging.xplane.dfds.cloud/v1alpha1
      kind: XConfluentTopicAccessACLV1
      spec:
        name: acl-4
        aclRule:
          operation: CREATE
          patternType: PREFIXED
          permission: ALLOW
          resourceType: GROUP
    patches:
    - fromFieldPath: spec.claimRef.deletionPolicy
      toFieldPath: spec.deletionPolicy
    - fromFieldPath: spec.claimRef.namespace
      toFieldPath: spec.namespace
    - fromFieldPath: spec.claimRef.namespace
      toFieldPath: spec.aclRule.resourceName
      transforms:
      - type: string
        string:
          fmt: "connect-%s"
    - type: FromCompositeFieldPath
      fromFieldPath: status.serviceaccountid
      toFieldPath: spec.aclRule.principal
    - fromFieldPath: spec.parameters.environment
      toFieldPath: spec.environment

# ---
# # AclCreateDelete(serviceAccountIdAsInt, true, "READ", "", $"connect-{prefix}")
# apiVersion: apiVersion: kafka.confluent.crossplane.io/v1alpha1
# kind: ACL
# metadata:
#   name: XXX
# spec:
#   forProvider:
#     environment: YYY
#     cluster: ZZZ
#     aclRule:
#       operation: READ
#       patternType: PREFIXED
#       permission: ALLOW
#       principal: "User:sa-0000"
#       resourceType: CONSUMER_GROUP
#       resourceName: connect-rootId # maybe with a dot

  - name: acl-5
    base:
      apiVersion: messaging.xplane.dfds.cloud/v1alpha1
      kind: XConfluentTopicAccessACLV1
      spec:
        name: acl-5
        aclRule:
          operation: READ
          patternType: PREFIXED
          permission: ALLOW
          resourceType: GROUP
    patches:
    - fromFieldPath: spec.claimRef.deletionPolicy
      toFieldPath: spec.deletionPolicy
    - fromFieldPath: spec.claimRef.namespace
      toFieldPath: spec.namespace
    - fromFieldPath: spec.claimRef.namespace
      toFieldPath: spec.aclRule.resourceName
      transforms:
      - type: string
        string:
          fmt: "connect-%s"
    - type: FromCompositeFieldPath
      fromFieldPath: status.serviceaccountid
      toFieldPath: spec.aclRule.principal
    - fromFieldPath: spec.parameters.environment
      toFieldPath: spec.environment
# ---
# # AclCreateDelete(serviceAccountIdAsInt, true, "WRITE", $"{PUB_DOT}{prefix}.")
# apiVersion: apiVersion: kafka.confluent.crossplane.io/v1alpha1
# kind: ACL
# metadata:
#   name: XXX
# spec:
#   forProvider:
#     environment: YYY
#     cluster: ZZZ
#     aclRule:
#       operation: WRITE
#       patternType: PREFIXED
#       permission: ALLOW
#       principal: "User:sa-0000"
#       resourceType: TOPIC
#       resourceName: pub.rootId # maybe with a dot

  - name: acl-6
    base:
      apiVersion: messaging.xplane.dfds.cloud/v1alpha1
      kind: XConfluentTopicAccessACLV1
      spec:
        name: acl-6
        aclRule:
          operation: WRITE
          patternType: PREFIXED
          permission: ALLOW
          resourceType: TOPIC
    patches:
    - fromFieldPath: spec.claimRef.deletionPolicy
      toFieldPath: spec.deletionPolicy
    - fromFieldPath: spec.claimRef.namespace
      toFieldPath: spec.namespace
    - fromFieldPath: spec.claimRef.namespace
      toFieldPath: spec.aclRule.resourceName
      transforms:
      - type: string
        string:
          fmt: "pub.%s"
    - type: FromCompositeFieldPath
      fromFieldPath: status.serviceaccountid
      toFieldPath: spec.aclRule.principal
    - fromFieldPath: spec.parameters.environment
      toFieldPath: spec.environment
# ---
# # AclCreateDelete(serviceAccountIdAsInt, true, "CREATE", $"{PUB_DOT}{prefix}.")
# apiVersion: apiVersion: kafka.confluent.crossplane.io/v1alpha1
# kind: ACL
# metadata:
#   name: XXX
# spec:
#   forProvider:
#     environment: YYY
#     cluster: ZZZ
#     aclRule:
#       operation: CREATE
#       patternType: PREFIXED
#       permission: ALLOW
#       principal: "User:sa-0000"
#       resourceType: TOPIC
#       resourceName: pub.rootId # maybe with a dot

  - name: acl-7
    base:
      apiVersion: messaging.xplane.dfds.cloud/v1alpha1
      kind: XConfluentTopicAccessACLV1
      spec:
        name: acl-7
        aclRule:
          operation: CREATE
          patternType: PREFIXED
          permission: ALLOW
          resourceType: TOPIC
    patches:
    - fromFieldPath: spec.claimRef.deletionPolicy
      toFieldPath: spec.deletionPolicy
    - fromFieldPath: spec.claimRef.namespace
      toFieldPath: spec.namespace
    - fromFieldPath: spec.claimRef.namespace
      toFieldPath: spec.aclRule.resourceName
      transforms:
      - type: string
        string:
          fmt: "pub.%s"
    - type: FromCompositeFieldPath
      fromFieldPath: status.serviceaccountid
      toFieldPath: spec.aclRule.principal
    - fromFieldPath: spec.parameters.environment
      toFieldPath: spec.environment
# ---
# # AclCreateDelete(serviceAccountIdAsInt, true, "WRITE", prefix)
# apiVersion: apiVersion: kafka.confluent.crossplane.io/v1alpha1
# kind: ACL
# metadata:
#   name: XXX
# spec:
#   forProvider:
#     environment: YYY
#     cluster: ZZZ
#     aclRule:
#       operation: WRITE
#       patternType: PREFIXED
#       permission: ALLOW
#       principal: "User:sa-0000"
#       resourceType: TOPIC
#       resourceName: rootId # maybe with a dot

  - name: acl-8
    base:
      apiVersion: messaging.xplane.dfds.cloud/v1alpha1
      kind: XConfluentTopicAccessACLV1
      spec:
        name: acl-8
        aclRule:
          operation: WRITE
          patternType: PREFIXED
          permission: ALLOW
          resourceType: TOPIC
    patches:
    - fromFieldPath: spec.claimRef.deletionPolicy
      toFieldPath: spec.deletionPolicy
    - fromFieldPath: spec.claimRef.namespace
      toFieldPath: spec.namespace
    - fromFieldPath: spec.claimRef.namespace
      toFieldPath: spec.aclRule.resourceName
    - type: FromCompositeFieldPath
      fromFieldPath: status.serviceaccountid
      toFieldPath: spec.aclRule.principal
    - fromFieldPath: spec.parameters.environment
      toFieldPath: spec.environment
# ---
# # AclCreateDelete(serviceAccountIdAsInt, true, "CREATE", prefix)
# apiVersion: apiVersion: kafka.confluent.crossplane.io/v1alpha1
# kind: ACL
# metadata:
#   name: XXX
# spec:
#   forProvider:
#     environment: YYY
#     cluster: ZZZ
#     aclRule:
#       operation: CREATE
#       patternType: PREFIXED
#       permission: ALLOW
#       principal: "User:sa-0000"
#       resourceType: TOPIC
#       resourceName: rootId # maybe with a dot

  - name: acl-9
    base:
      apiVersion: messaging.xplane.dfds.cloud/v1alpha1
      kind: XConfluentTopicAccessACLV1
      spec:
        name: acl-9
        aclRule:
          operation: CREATE
          patternType: PREFIXED
          permission: ALLOW
          resourceType: TOPIC
    patches:
    - fromFieldPath: spec.claimRef.deletionPolicy
      toFieldPath: spec.deletionPolicy
    - fromFieldPath: spec.claimRef.namespace
      toFieldPath: spec.namespace
    - fromFieldPath: spec.claimRef.namespace
      toFieldPath: spec.aclRule.resourceName
    - type: FromCompositeFieldPath
      fromFieldPath: status.serviceaccountid
      toFieldPath: spec.aclRule.principal
    - fromFieldPath: spec.parameters.environment
      toFieldPath: spec.environment
# ---
# # AclCreateDelete(serviceAccountIdAsInt, true, "READ", prefix)
# apiVersion: apiVersion: kafka.confluent.crossplane.io/v1alpha1
# kind: ACL
# metadata:
#   name: XXX
# spec:
#   forProvider:
#     environment: YYY
#     cluster: ZZZ
#     aclRule:
#       operation: READ
#       patternType: PREFIXED
#       permission: ALLOW
#       principal: "User:sa-0000"
#       resourceType: TOPIC
#       resourceName: rootId # maybe with a dot

  - name: acl-10
    base:
      apiVersion: messaging.xplane.dfds.cloud/v1alpha1
      kind: XConfluentTopicAccessACLV1
      spec:
        name: acl-10
        aclRule:
          operation: READ
          patternType: PREFIXED
          permission: ALLOW
          resourceType: TOPIC
    patches:
    - fromFieldPath: spec.claimRef.deletionPolicy
      toFieldPath: spec.deletionPolicy
    - fromFieldPath: spec.claimRef.namespace
      toFieldPath: spec.namespace
    - fromFieldPath: spec.claimRef.namespace
      toFieldPath: spec.aclRule.resourceName
    - type: FromCompositeFieldPath
      fromFieldPath: status.serviceaccountid
      toFieldPath: spec.aclRule.principal
    - fromFieldPath: spec.parameters.environment
      toFieldPath: spec.environment
# ---
# # AclCreateDelete(serviceAccountIdAsInt, true, "DESCRIBE", prefix)
# apiVersion: apiVersion: kafka.confluent.crossplane.io/v1alpha1
# kind: ACL
# metadata:
#   name: XXX
# spec:
#   forProvider:
#     environment: YYY
#     cluster: ZZZ
#     aclRule:
#       operation: DESCRIBE
#       patternType: PREFIXED
#       permission: ALLOW
#       principal: "User:sa-0000"
#       resourceType: TOPIC
#       resourceName: rootId # maybe with a dot

  - name: acl-11
    base:
      apiVersion: messaging.xplane.dfds.cloud/v1alpha1
      kind: XConfluentTopicAccessACLV1
      spec:
        name: acl-11
        aclRule:
          operation: DESCRIBE
          patternType: PREFIXED
          permission: ALLOW
          resourceType: TOPIC
    patches:
    - fromFieldPath: spec.claimRef.deletionPolicy
      toFieldPath: spec.deletionPolicy
    - fromFieldPath: spec.claimRef.namespace
      toFieldPath: spec.namespace
    - fromFieldPath: spec.claimRef.namespace
      toFieldPath: spec.aclRule.resourceName
    - type: FromCompositeFieldPath
      fromFieldPath: status.serviceaccountid
      toFieldPath: spec.aclRule.principal
    - fromFieldPath: spec.parameters.environment
      toFieldPath: spec.environment
# ---
# # AclCreateDelete(serviceAccountIdAsInt, true, "DESCRIBE-CONFIGS", prefix)
# apiVersion: apiVersion: kafka.confluent.crossplane.io/v1alpha1
# kind: ACL
# metadata:
#   name: XXX
# spec:
#   forProvider:
#     environment: YYY
#     cluster: ZZZ
#     aclRule:
#       operation: DESCRIBE-CONFIGS
#       patternType: PREFIXED
#       permission: ALLOW
#       principal: "User:sa-0000"
#       resourceType: TOPIC
#       resourceName: rootId # maybe with a dot

  - name: acl-12
    base:
      apiVersion: messaging.xplane.dfds.cloud/v1alpha1
      kind: XConfluentTopicAccessACLV1
      spec:
        name: acl-12
        aclRule:
          operation: DESCRIBE_CONFIGS
          patternType: PREFIXED
          permission: ALLOW
          resourceType: TOPIC
    patches:
    - fromFieldPath: spec.claimRef.deletionPolicy
      toFieldPath: spec.deletionPolicy
    - fromFieldPath: spec.claimRef.namespace
      toFieldPath: spec.namespace
    - fromFieldPath: spec.claimRef.namespace
      toFieldPath: spec.aclRule.resourceName
    - type: FromCompositeFieldPath
      fromFieldPath: status.serviceaccountid
      toFieldPath: spec.aclRule.principal
    - fromFieldPath: spec.parameters.environment
      toFieldPath: spec.environment
# ---
# # AclCreateDelete(serviceAccountIdAsInt, false, "alter")
# apiVersion: apiVersion: kafka.confluent.crossplane.io/v1alpha1
# kind: ACL
# metadata:
#   name: XXX
# spec:
#   forProvider:
#     environment: YYY
#     cluster: ZZZ
#     aclRule:
#       operation: alter
#       patternType: LITERAL
#       permission: DENY
#       principal: "User:sa-0000"
#       resourceType: CLUSTER
#       resourceName: ""

  - name: acl-13
    base:
      apiVersion: messaging.xplane.dfds.cloud/v1alpha1
      kind: XConfluentTopicAccessACLV1
      spec:
        name: acl-13
        aclRule:
          operation: ALTER
          patternType: LITERAL
          permission: DENY
          resourceType: CLUSTER
          resourceName: kafka-cluster
    patches:
    - fromFieldPath: spec.claimRef.deletionPolicy
      toFieldPath: spec.deletionPolicy
    - fromFieldPath: spec.claimRef.namespace
      toFieldPath: spec.namespace
    - type: FromCompositeFieldPath
      fromFieldPath: status.serviceaccountid
      toFieldPath: spec.aclRule.principal
    - fromFieldPath: spec.parameters.environment
      toFieldPath: spec.environment
# ---
# # AclCreateDelete(serviceAccountIdAsInt, false, "alter-configs")
# apiVersion: apiVersion: kafka.confluent.crossplane.io/v1alpha1
# kind: ACL
# metadata:
#   name: XXX
# spec:
#   forProvider:
#     environment: YYY
#     cluster: ZZZ
#     aclRule:
#       operation: alter-configs
#       patternType: LITERAL
#       permission: DENY
#       principal: "User:sa-0000"
#       resourceType: CLUSTER
#       resourceName: ""

  - name: acl-14
    base:
      apiVersion: messaging.xplane.dfds.cloud/v1alpha1
      kind: XConfluentTopicAccessACLV1
      spec:
        name: acl-14
        aclRule:
          operation: ALTER_CONFIGS
          patternType: LITERAL
          permission: DENY
          resourceType: CLUSTER
          resourceName: kafka-cluster
    patches:
    - fromFieldPath: spec.claimRef.deletionPolicy
      toFieldPath: spec.deletionPolicy
    - fromFieldPath: spec.claimRef.namespace
      toFieldPath: spec.namespace
    - type: FromCompositeFieldPath
      fromFieldPath: status.serviceaccountid
      toFieldPath: spec.aclRule.principal
    - fromFieldPath: spec.parameters.environment
      toFieldPath: spec.environment
# ---
# # AclCreateDelete(serviceAccountIdAsInt, false, "cluster-action")
# apiVersion: apiVersion: kafka.confluent.crossplane.io/v1alpha1
# kind: ACL
# metadata:
#   name: XXX
# spec:
#   forProvider:
#     environment: YYY
#     cluster: ZZZ
#     aclRule:
#       operation: cluster-action
#       patternType: LITERAL
#       permission: DENY
#       principal: "User:sa-0000"
#       resourceType: CLUSTER
#       resourceName: ""

  - name: acl-15
    base:
      apiVersion: messaging.xplane.dfds.cloud/v1alpha1
      kind: XConfluentTopicAccessACLV1
      spec:
        name: acl-15
        aclRule:
          operation: CLUSTER_ACTION
          patternType: LITERAL
          permission: DENY
          resourceType: CLUSTER
          resourceName: kafka-cluster
    patches:
    - fromFieldPath: spec.claimRef.deletionPolicy
      toFieldPath: spec.deletionPolicy
    - fromFieldPath: spec.claimRef.namespace
      toFieldPath: spec.namespace
    - type: FromCompositeFieldPath
      fromFieldPath: status.serviceaccountid
      toFieldPath: spec.aclRule.principal
    - fromFieldPath: spec.parameters.environment
      toFieldPath: spec.environment
# ---
# # AclCreateDelete(serviceAccountIdAsInt, false, "create", "'*'")
# apiVersion: apiVersion: kafka.confluent.crossplane.io/v1alpha1
# kind: ACL
# metadata:
#   name: XXX
# spec:
#   forProvider:
#     environment: YYY
#     cluster: ZZZ
#     aclRule:
#       operation: CREATE
#       patternType: PREFIXED
#       permission: DENY
#       principal: "User:sa-0000"
#       resourceType: TOPIC
#       resourceName: "*"

  - name: acl-16
    base:
      apiVersion: messaging.xplane.dfds.cloud/v1alpha1
      kind: XConfluentTopicAccessACLV1
      spec:
        name: acl-16
        aclRule:
          operation: CREATE
          patternType: PREFIXED
          permission: DENY
          resourceType: TOPIC
          resourceName: "*"
    patches:
    - fromFieldPath: spec.claimRef.deletionPolicy
      toFieldPath: spec.deletionPolicy
    - fromFieldPath: spec.claimRef.namespace
      toFieldPath: spec.namespace
    - type: FromCompositeFieldPath
      fromFieldPath: status.serviceaccountid
      toFieldPath: spec.aclRule.principal
    - fromFieldPath: spec.parameters.environment
      toFieldPath: spec.environment
# ---
# # AclCreateDelete(serviceAccountIdAsInt, false, "READ", PUB_DOT)
# apiVersion: apiVersion: kafka.confluent.crossplane.io/v1alpha1
# kind: ACL
# metadata:
#   name: XXX
# spec:
#   forProvider:
#     environment: YYY
#     cluster: ZZZ
#     aclRule:
#       operation: READ
#       patternType: PREFIXED
#       permission: ALLOW
#       principal: "User:sa-0000"
#       resourceType: TOPIC
#       resourceName: "pub."

  - name: acl-17
    base:
      apiVersion: messaging.xplane.dfds.cloud/v1alpha1
      kind: XConfluentTopicAccessACLV1
      spec:
        name: acl-17
        aclRule:
          operation: READ
          patternType: PREFIXED
          permission: ALLOW
          resourceType: TOPIC
          resourceName: "pub."
    patches:
    - fromFieldPath: spec.claimRef.deletionPolicy
      toFieldPath: spec.deletionPolicy
    - fromFieldPath: spec.claimRef.namespace
      toFieldPath: spec.namespace
    - type: FromCompositeFieldPath
      fromFieldPath: status.serviceaccountid
      toFieldPath: spec.aclRule.principal
    - fromFieldPath: spec.parameters.environment
      toFieldPath: spec.environment