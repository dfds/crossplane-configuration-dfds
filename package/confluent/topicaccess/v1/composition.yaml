apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: xconfluenttopicaccessv1s.messaging.xplane.dfds.cloud
spec:
  compositeTypeRef:
    apiVersion: messaging.xplane.dfds.cloud/v1alpha1
    kind: XConfluentTopicAccessV1
  resources:
  - name: serviceaccount
    base:
      apiVersion: iam.confluent.crossplane.io/v1alpha1
      kind: ServiceAccount
      metadata:
        name: TestServiceAccountSamdi # name should be assigned
      spec:
        forProvider:
          description: some description
        providerConfigRef:
          name: confluent-provider
    patches:
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.id
      toFieldPath: status.serviceaccountid
      policy:
        fromFieldPath: Required

  - name: apikey
    base:
      apiVersion: kubernetes.crossplane.io/v1alpha1
      kind: Object
      metadata:
        name: api-key-data
      spec:
        references:
        # - fromObject:
        #     apiVersion: iam.confluent.crossplane.io/v1alpha1
        #     kind: ServiceAccount
        #     name: TestServiceAccountSamdi # TODO: make use of name convention
        #     fieldPath: status.atProvider.id
        #   toFieldPath: spec.forProvider.manifest.spec.serviceAccount
        - patchesFrom:
            apiVersion: v1
            kind: ConfigMap
            name: clusterid
          toFieldPath: spec.forProvider.resource
        - patchesFrom:
            apiVersion: v1
            kind: ConfigMap
            name: environmentid
          toFieldPath: spec.forProvider.environment
        forProvider:
          manifest:
            apiVersion: apikey.confluent.crossplane.io/v1alpha1
            kind: APIKey
            spec:
              forProvider:
                description: something
                serviceAccount:
              providerConfigRef:
                name: confluent-provider
              writeConnectionSecretToRef:
                name: confluent-apikey-samdi
                namespace: default
        providerConfigRef:
          name: kubernetes-provider
    patches:
    - fromFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: "%s-api-key"
    - fromFieldPath: spec.claimRef.namespace
      toFieldPath: spec.references[0].patchesFrom.namespace
    - fromFieldPath: spec.parameters.environment
      toFieldPath: spec.references[0].patchesFrom.fieldPath
      transforms:
      - type: string
        string:
          fmt: "data.%s"
    - fromFieldPath: spec.claimRef.namespace
      toFieldPath: spec.references[1].patchesFrom.namespace
    - fromFieldPath: spec.parameters.environment
      toFieldPath: spec.references[1].patchesFrom.fieldPath
      transforms:
      - type: string
        string:
          fmt: "data.%s"
    - type: FromCompositeFieldPath
      fromFieldPath: status.serviceaccountid
      toFieldPath: spec.forProvider.manifest.spec.forProvider.serviceAccount
      policy:
        fromFieldPath: Required




# # For root-id.*
# --- DONE
# # AclCreateDelete(serviceAccountIdAsInt, true, "WRITE", "", prefix)
# apiVersion: apiVersion: kafka.confluent.crossplane.io/v1alpha1
# kind: ACL
# metadata:
#   name: XXX
# spec:
#   forProvider:
#     environment: YYY
#     cluster: ZZZ
#     aclRule:
#       operation: WRITE
#       patternType: PREFIXED
#       permission: ALLOW
#       principal: "User:sa-0000"
#       resourceType: CONSUMER_GROUP
#       resourceName: rootId # maybe with a dot

# TODO:
# - rename object confluenttopicaccessdfdssamdi-rznq6-7hfmc => confluenttopicaccessdfdssamdi-acl-7hfmc.
# -

  - name: acl-0
    base:
      apiVersion: kubernetes.crossplane.io/v1alpha1
      kind: Object
      spec:
        references:
        - patchesFrom:
            apiVersion: v1
            kind: ConfigMap
            name: clusterid
          toFieldPath: spec.forProvider.cluster
        - patchesFrom:
            apiVersion: v1
            kind: ConfigMap
            name: environmentid
          toFieldPath: spec.forProvider.environment
        forProvider:
          manifest:
            apiVersion: kafka.confluent.crossplane.io/v1alpha1
            kind: ACL
            metadata:
              name: acl-test-0000
            spec:
              forProvider:
                aclRule:
                  operation: WRITE
                  patternType: PREFIXED
                  permission: ALLOW
                  resourceType: GROUP
              providerConfigRef:
                name: confluent-provider
        providerConfigRef:
          name: kubernetes-provider
    patches:
    - fromFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: "%s-rule-0"
    - fromFieldPath: spec.claimRef.namespace
      toFieldPath: spec.references[0].patchesFrom.namespace
    - fromFieldPath: spec.parameters.environment
      toFieldPath: spec.references[0].patchesFrom.fieldPath
      transforms:
      - type: string
        string:
          fmt: "data.%s"
    - fromFieldPath: spec.claimRef.namespace
      toFieldPath: spec.references[1].patchesFrom.namespace
    - fromFieldPath: spec.parameters.environment
      toFieldPath: spec.references[1].patchesFrom.fieldPath
      transforms:
      - type: string
        string:
          fmt: "data.%s"
    - fromFieldPath: metadata.name
      toFieldPath: spec.forProvider.manifest.metadata.name
      transforms:
      - type: string
        string:
          fmt: "%s-rule-0"
    - type: FromCompositeFieldPath
      fromFieldPath: status.serviceaccountid
      transforms:
      - type: string
        string:
          fmt: "User:%s"
      toFieldPath: spec.forProvider.manifest.spec.forProvider.aclRule.principal
      policy:
        fromFieldPath: Required
    - fromFieldPath: spec.claimRef.namespace
      toFieldPath: spec.forProvider.manifest.spec.forProvider.aclRule.resourceName


# ---
# # AclCreateDelete(serviceAccountIdAsInt, true, "CREATE", "", prefix)
# apiVersion: apiVersion: kafka.confluent.crossplane.io/v1alpha1
# kind: ACL
# metadata:
#   name: XXX
# spec:
#   forProvider:
#     environment: YYY
#     cluster: ZZZ
#     aclRule:
#       operation: CREATE
#       patternType: PREFIXED
#       permission: ALLOW
#       principal: "User:sa-0000"
#       resourceType: CONSUMER_GROUP
#       resourceName: rootId # maybe with a dot


  - name: acl-1
    base:
      apiVersion: kubernetes.crossplane.io/v1alpha1
      kind: Object
      spec:
        references:
        - patchesFrom:
            apiVersion: v1
            kind: ConfigMap
            name: clusterid
          toFieldPath: spec.forProvider.cluster
        - patchesFrom:
            apiVersion: v1
            kind: ConfigMap
            name: environmentid
          toFieldPath: spec.forProvider.environment
        forProvider:
          manifest:
            apiVersion: kafka.confluent.crossplane.io/v1alpha1
            kind: ACL
            metadata:
              name: acl-test-00001
            spec:
              forProvider:
                aclRule:
                  operation: CREATE
                  patternType: PREFIXED
                  permission: ALLOW
                  resourceType: GROUP
              providerConfigRef:
                name: confluent-provider
        providerConfigRef:
          name: kubernetes-provider
    patches:
    - fromFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: "%s-rule-1"
    - fromFieldPath: spec.claimRef.namespace
      toFieldPath: spec.references[0].patchesFrom.namespace
    - fromFieldPath: spec.parameters.environment
      toFieldPath: spec.references[0].patchesFrom.fieldPath
      transforms:
      - type: string
        string:
          fmt: "data.%s"
    - fromFieldPath: spec.claimRef.namespace
      toFieldPath: spec.references[1].patchesFrom.namespace
    - fromFieldPath: spec.parameters.environment
      toFieldPath: spec.references[1].patchesFrom.fieldPath
      transforms:
      - type: string
        string:
          fmt: "data.%s"
    - fromFieldPath: metadata.name
      toFieldPath: spec.forProvider.manifest.metadata.name
      transforms:
      - type: string
        string:
          fmt: "%s-rule-1"
    - type: FromCompositeFieldPath
      fromFieldPath: status.serviceaccountid
      transforms:
      - type: string
        string:
          fmt: "User:%s"
      toFieldPath: spec.forProvider.manifest.spec.forProvider.aclRule.principal
      policy:
        fromFieldPath: Required
    - fromFieldPath: spec.claimRef.namespace
      toFieldPath: spec.forProvider.manifest.spec.forProvider.aclRule.resourceName

# ---
# # AclCreateDelete(serviceAccountIdAsInt, true, "READ", "", prefix)
# apiVersion: apiVersion: kafka.confluent.crossplane.io/v1alpha1
# kind: ACL
# metadata:
#   name: XXX
# spec:
#   forProvider:
#     environment: YYY
#     cluster: ZZZ
#     aclRule:
#       operation: READ
#       patternType: PREFIXED
#       permission: ALLOW
#       principal: "User:sa-0000"
#       resourceType: CONSUMER_GROUP
#       resourceName: rootId # maybe with a dot

  - name: acl-2
    base:
      apiVersion: kubernetes.crossplane.io/v1alpha1
      kind: Object
      spec:
        references:
        - patchesFrom:
            apiVersion: v1
            kind: ConfigMap
            name: clusterid
          toFieldPath: spec.forProvider.cluster
        - patchesFrom:
            apiVersion: v1
            kind: ConfigMap
            name: environmentid
          toFieldPath: spec.forProvider.environment
        forProvider:
          manifest:
            apiVersion: kafka.confluent.crossplane.io/v1alpha1
            kind: ACL
            metadata:
              name: acl-test-00002
            spec:
              forProvider:
                aclRule:
                  operation: READ
                  patternType: PREFIXED
                  permission: ALLOW
                  resourceType: GROUP
              providerConfigRef:
                name: confluent-provider
        providerConfigRef:
          name: kubernetes-provider
    patches:
    - fromFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: "%s-rule-2"
    - fromFieldPath: spec.claimRef.namespace
      toFieldPath: spec.references[0].patchesFrom.namespace
    - fromFieldPath: spec.parameters.environment
      toFieldPath: spec.references[0].patchesFrom.fieldPath
      transforms:
      - type: string
        string:
          fmt: "data.%s"
    - fromFieldPath: spec.claimRef.namespace
      toFieldPath: spec.references[1].patchesFrom.namespace
    - fromFieldPath: spec.parameters.environment
      toFieldPath: spec.references[1].patchesFrom.fieldPath
      transforms:
      - type: string
        string:
          fmt: "data.%s"
    - fromFieldPath: metadata.name
      toFieldPath: spec.forProvider.manifest.metadata.name
      transforms:
      - type: string
        string:
          fmt: "%s-rule-2"
    - type: FromCompositeFieldPath
      fromFieldPath: status.serviceaccountid
      transforms:
      - type: string
        string:
          fmt: "User:%s"
      toFieldPath: spec.forProvider.manifest.spec.forProvider.aclRule.principal
      policy:
        fromFieldPath: Required
    - fromFieldPath: spec.claimRef.namespace
      toFieldPath: spec.forProvider.manifest.spec.forProvider.aclRule.resourceName

# # For connect-rootid.*
# ---
# # AclCreateDelete(serviceAccountIdAsInt, true, "WRITE", "", $"connect-{prefix}")
# apiVersion: apiVersion: kafka.confluent.crossplane.io/v1alpha1
# kind: ACL
# metadata:
#   name: XXX
# spec:
#   forProvider:
#     environment: YYY
#     cluster: ZZZ
#     aclRule:
#       operation: WRITE
#       patternType: PREFIXED
#       permission: ALLOW
#       principal: "User:sa-0000"
#       resourceType: CONSUMER_GROUP
#       resourceName: connect-rootId # maybe with a dot

# ---
# # AclCreateDelete(serviceAccountIdAsInt, true, "CREATE", "", $"connect-{prefix}")
# apiVersion: apiVersion: kafka.confluent.crossplane.io/v1alpha1
# kind: ACL
# metadata:
#   name: XXX
# spec:
#   forProvider:
#     environment: YYY
#     cluster: ZZZ
#     aclRule:
#       operation: CREATE
#       patternType: PREFIXED
#       permission: ALLOW
#       principal: "User:sa-0000"
#       resourceType: CONSUMER_GROUP
#       resourceName: connect-rootId # maybe with a dot

# ---
# # AclCreateDelete(serviceAccountIdAsInt, true, "READ", "", $"connect-{prefix}")
# apiVersion: apiVersion: kafka.confluent.crossplane.io/v1alpha1
# kind: ACL
# metadata:
#   name: XXX
# spec:
#   forProvider:
#     environment: YYY
#     cluster: ZZZ
#     aclRule:
#       operation: READ
#       patternType: PREFIXED
#       permission: ALLOW
#       principal: "User:sa-0000"
#       resourceType: CONSUMER_GROUP
#       resourceName: connect-rootId # maybe with a dot

# ---
# # AclCreateDelete(serviceAccountIdAsInt, true, "WRITE", $"{PUB_DOT}{prefix}.")
# apiVersion: apiVersion: kafka.confluent.crossplane.io/v1alpha1
# kind: ACL
# metadata:
#   name: XXX
# spec:
#   forProvider:
#     environment: YYY
#     cluster: ZZZ
#     aclRule:
#       operation: WRITE
#       patternType: PREFIXED
#       permission: ALLOW
#       principal: "User:sa-0000"
#       resourceType: TOPIC
#       resourceName: pub.rootId # maybe with a dot

# ---
# # AclCreateDelete(serviceAccountIdAsInt, true, "CREATE", $"{PUB_DOT}{prefix}.")
# apiVersion: apiVersion: kafka.confluent.crossplane.io/v1alpha1
# kind: ACL
# metadata:
#   name: XXX
# spec:
#   forProvider:
#     environment: YYY
#     cluster: ZZZ
#     aclRule:
#       operation: CREATE
#       patternType: PREFIXED
#       permission: ALLOW
#       principal: "User:sa-0000"
#       resourceType: TOPIC
#       resourceName: pub.rootId # maybe with a dot

# ---
# # AclCreateDelete(serviceAccountIdAsInt, true, "WRITE", prefix)
# apiVersion: apiVersion: kafka.confluent.crossplane.io/v1alpha1
# kind: ACL
# metadata:
#   name: XXX
# spec:
#   forProvider:
#     environment: YYY
#     cluster: ZZZ
#     aclRule:
#       operation: WRITE
#       patternType: PREFIXED
#       permission: ALLOW
#       principal: "User:sa-0000"
#       resourceType: TOPIC
#       resourceName: rootId # maybe with a dot

# ---
# # AclCreateDelete(serviceAccountIdAsInt, true, "CREATE", prefix)
# apiVersion: apiVersion: kafka.confluent.crossplane.io/v1alpha1
# kind: ACL
# metadata:
#   name: XXX
# spec:
#   forProvider:
#     environment: YYY
#     cluster: ZZZ
#     aclRule:
#       operation: CREATE
#       patternType: PREFIXED
#       permission: ALLOW
#       principal: "User:sa-0000"
#       resourceType: TOPIC
#       resourceName: rootId # maybe with a dot

# ---
# # AclCreateDelete(serviceAccountIdAsInt, true, "READ", prefix)
# apiVersion: apiVersion: kafka.confluent.crossplane.io/v1alpha1
# kind: ACL
# metadata:
#   name: XXX
# spec:
#   forProvider:
#     environment: YYY
#     cluster: ZZZ
#     aclRule:
#       operation: READ
#       patternType: PREFIXED
#       permission: ALLOW
#       principal: "User:sa-0000"
#       resourceType: TOPIC
#       resourceName: rootId # maybe with a dot

# ---
# # AclCreateDelete(serviceAccountIdAsInt, true, "DESCRIBE", prefix)
# apiVersion: apiVersion: kafka.confluent.crossplane.io/v1alpha1
# kind: ACL
# metadata:
#   name: XXX
# spec:
#   forProvider:
#     environment: YYY
#     cluster: ZZZ
#     aclRule:
#       operation: DESCRIBE
#       patternType: PREFIXED
#       permission: ALLOW
#       principal: "User:sa-0000"
#       resourceType: TOPIC
#       resourceName: rootId # maybe with a dot

# ---
# # AclCreateDelete(serviceAccountIdAsInt, true, "DESCRIBE-CONFIGS", prefix)
# apiVersion: apiVersion: kafka.confluent.crossplane.io/v1alpha1
# kind: ACL
# metadata:
#   name: XXX
# spec:
#   forProvider:
#     environment: YYY
#     cluster: ZZZ
#     aclRule:
#       operation: DESCRIBE-CONFIGS
#       patternType: PREFIXED
#       permission: ALLOW
#       principal: "User:sa-0000"
#       resourceType: TOPIC
#       resourceName: rootId # maybe with a dot

# ---
# # AclCreateDelete(serviceAccountIdAsInt, false, "alter")
# apiVersion: apiVersion: kafka.confluent.crossplane.io/v1alpha1
# kind: ACL
# metadata:
#   name: XXX
# spec:
#   forProvider:
#     environment: YYY
#     cluster: ZZZ
#     aclRule:
#       operation: alter
#       patternType: LITERAL
#       permission: DENY
#       principal: "User:sa-0000"
#       resourceType: CLUSTER
#       resourceName: ""

# ---
# # AclCreateDelete(serviceAccountIdAsInt, false, "alter-configs")
# apiVersion: apiVersion: kafka.confluent.crossplane.io/v1alpha1
# kind: ACL
# metadata:
#   name: XXX
# spec:
#   forProvider:
#     environment: YYY
#     cluster: ZZZ
#     aclRule:
#       operation: alter-configs
#       patternType: LITERAL
#       permission: DENY
#       principal: "User:sa-0000"
#       resourceType: CLUSTER
#       resourceName: ""

# ---
# # AclCreateDelete(serviceAccountIdAsInt, false, "cluster-action")
# apiVersion: apiVersion: kafka.confluent.crossplane.io/v1alpha1
# kind: ACL
# metadata:
#   name: XXX
# spec:
#   forProvider:
#     environment: YYY
#     cluster: ZZZ
#     aclRule:
#       operation: cluster-action
#       patternType: LITERAL
#       permission: DENY
#       principal: "User:sa-0000"
#       resourceType: CLUSTER
#       resourceName: ""

# ---
# # AclCreateDelete(serviceAccountIdAsInt, false, "create", "'*'")
# apiVersion: apiVersion: kafka.confluent.crossplane.io/v1alpha1
# kind: ACL
# metadata:
#   name: XXX
# spec:
#   forProvider:
#     environment: YYY
#     cluster: ZZZ
#     aclRule:
#       operation: CREATE
#       patternType: PREFIXED
#       permission: DENY
#       principal: "User:sa-0000"
#       resourceType: TOPIC
#       resourceName: "*"

# ---
# # AclCreateDelete(serviceAccountIdAsInt, false, "READ", PUB_DOT)
# apiVersion: apiVersion: kafka.confluent.crossplane.io/v1alpha1
# kind: ACL
# metadata:
#   name: XXX
# spec:
#   forProvider:
#     environment: YYY
#     cluster: ZZZ
#     aclRule:
#       operation: READ
#       patternType: PREFIXED
#       permission: ALLOW
#       principal: "User:sa-0000"
#       resourceType: TOPIC
#       resourceName: "pub."