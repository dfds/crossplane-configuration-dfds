apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: compositesqldatabaseinstances.crossplane.dfds.cloud
  labels:
    provider: aws
spec:
  compositeTypeRef:
    apiVersion: crossplane.dfds.cloud/v1alpha1
    kind: CompositeSqlDatabaseInstance
  patchSets:
  - name: object-metadata
    patches:
    - fromFieldPath: metadata.name
      toFieldPath: spec.forProvider.manifest.metadata.name    
      policy:
        fromFieldPath: Required       
    - fromFieldPath: metadata.labels
      toFieldPath: spec.forProvider.manifest.metadata.labels
      policy:
        fromFieldPath: Required
  - name: configname
    patches:
    - fromFieldPath: spec.claimRef.namespace    
      toFieldPath: spec.providerConfigRef.name
      transforms:
      - type: string
        string:
          fmt: "%s-aws"
      policy:
        fromFieldPath: Required
  resources:
  - name: role
    base:
      apiVersion: kubernetes.crossplane.io/v1alpha1
      kind: Object
      spec:
        forProvider:
          manifest:
            apiVersion: rbac.authorization.k8s.io/v1
            kind: ClusterRole
            metadata:
              name: deployed-using-crossplane
              labels:
                managed-by: "crossplane"
            rules:
            - apiGroups: ["ec2.aws.crossplane.io"]
              resources: ["securitygroups"]
              resourceNames: [ ]
              verbs: ["get"]
            - apiGroups: ["database.aws.crossplane.io"]
              resources: ["rdsinstances"]
              resourceNames: [ ]
              verbs: ["get"]              
        providerConfigRef:
          name: kubernetes-provider        
    patches:
    - type: PatchSet
      patchSetName: object-metadata
    - fromFieldPath: metadata.name
      toFieldPath: spec.forProvider.manifest.rules[0].resourceNames[0]
    - fromFieldPath: metadata.name
      toFieldPath: spec.forProvider.manifest.rules[1].resourceNames[0]
    - type: ToCompositeFieldPath
      fromFieldPath: "metadata.name"
      toFieldPath: "status.createdResources.clusterrole" 

  - name: rolebinding
    base:
      apiVersion: kubernetes.crossplane.io/v1alpha1
      kind: Object
      spec:
        forProvider:
          manifest:
            apiVersion: rbac.authorization.k8s.io/v1
            kind: ClusterRoleBinding
            metadata:
              name: placeholder
            roleRef:
              apiGroup: rbac.authorization.k8s.io
              kind: ClusterRole
              name: roleref
            subjects:
            - apiGroup: rbac.authorization.k8s.io
              kind: Group
              name: placeholder
        providerConfigRef:
          name: kubernetes-provider
    patches:
    - type: PatchSet
      patchSetName: object-metadata    
    - fromFieldPath: metadata.name
      toFieldPath: spec.forProvider.manifest.roleRef.name
    - fromFieldPath: spec.claimRef.namespace
      toFieldPath: spec.forProvider.manifest.subjects[0].name
    - type: ToCompositeFieldPath
      fromFieldPath: "metadata.name"
      toFieldPath: "status.createdResources.clusterrolebinding"

  - name: securitygroup
    base:
      apiVersion: ec2.aws.crossplane.io/v1beta1
      kind: SecurityGroup
      spec:
        forProvider:
          region: eu-west-1
          description: Allow access to PostgreSQL
          ingress:
            - fromPort: 5432
              toPort: 5432
              ipProtocol: tcp
              ipRanges:
                - cidrIp: 0.0.0.0/0
                  description: postgresql
    patches:
    - type: PatchSet
      patchSetName: configname    
    - fromFieldPath: metadata.name
      toFieldPath: metadata.name
    - fromFieldPath: metadata.name
      toFieldPath: "spec.forProvider.groupName"
    - type: ToCompositeFieldPath
      fromFieldPath: "metadata.name"
      toFieldPath: "status.createdResources.securitygroup"      
  - name: rdinstance
    base:
      apiVersion: database.aws.crossplane.io/v1beta1
      kind: RDSInstance
      spec:
        forProvider:
          finalDBSnapshotIdentifier: null
          vpcSecurityGroupIDSelector:
            matchControllerRef: true
        writeConnectionSecretToRef:
          namespace: crossplane-system
    patches:
    - type: PatchSet
      patchSetName: configname    
    - fromFieldPath: metadata.name
      toFieldPath: metadata.name    
    - fromFieldPath: "metadata.uid"
      toFieldPath: "spec.writeConnectionSecretToRef.name"
      transforms:
      - type: string
        string:
          fmt: "%s-databaseserver"
    - fromFieldPath: "spec.parameters.databaseEngine"
      toFieldPath: "spec.forProvider.engine"
    - fromFieldPath: "spec.parameters.databaseEngineVersion"
      toFieldPath: "spec.forProvider.engineVersion"
    - fromFieldPath: "spec.parameters.region"
      toFieldPath: "spec.forProvider.region"
      transforms:
      - type: map
        map:
          ireland: eu-west-1
          germany: eu-central-1
    - fromFieldPath: "spec.parameters.storageSize"
      toFieldPath: "spec.forProvider.allocatedStorage"
    - fromFieldPath: "spec.parameters.storageType"
      toFieldPath: "spec.forProvider.storageType"
      transforms:
      - type: map
        map:
          ssd: gp2
          magnetic: standard
    - fromFieldPath: "spec.parameters.maintenanceWindow"
      toFieldPath: "spec.forProvider.preferredMaintenanceWindow"
    - fromFieldPath: "spec.parameters.backupWindow"
      toFieldPath: "spec.forProvider.preferredBackupWindow"
    - fromFieldPath: "spec.parameters.administratorUsername"
      toFieldPath: "spec.forProvider.masterUsername"
    - fromFieldPath: "spec.parameters.allowMajorVersionUpgrade"
      toFieldPath: "spec.forProvider.allowMajorVersionUpgrade"
    - fromFieldPath: "spec.parameters.applyModificationsImmediately"
      toFieldPath: "spec.forProvider.applyModificationsImmediately"
    - fromFieldPath: "spec.parameters.autoMinorVersionUpgrade"
      toFieldPath: "spec.forProvider.autoMinorVersionUpgrade"
    - fromFieldPath: "spec.parameters.isProduction"
      toFieldPath: "spec.forProvider.skipFinalSnapshotBeforeDeletion"
      transforms:
      - type: convert
        convert:
          toType: string
      - type: map
        map:
          "true": "false"
          "false": "true"
      - type: convert
        convert:
          toType: bool
    - fromFieldPath: "spec.parameters.finalBackupName"
      toFieldPath: "spec.forProvider.finalDBSnapshotIdentifier"
    - type: CombineFromComposite
      combine:
        variables: 
          - fromFieldPath: spec.parameters.instanceClass          
          - fromFieldPath: spec.parameters.instanceSize 
        strategy: string        
        string:
          fmt: "%s-%s"
      toFieldPath: spec.forProvider.dbInstanceClass
      transforms:
      - type: map
        map:
          burstable-small: db.t3.small
          burstable-medium: db.t3.medium
          burstable-large: db.t3.large
          standard-small: db.m6g.large
          standard-medium: db.m6g.xlarge
          standard-large: db.m6g.2large
          memory-small: db.r6g.large
          memory-medium: db.r6g.xlarge
          memory-large: db.r6g.2xlarge
    - type: ToCompositeFieldPath
      fromFieldPath: "metadata.name"
      toFieldPath: "status.createdResources.rdsinstance"  
    - type: ToCompositeFieldPath
      fromFieldPath: status.conditions
      toFieldPath: status.dbInstanceConditions
      policy:
        fromFieldPath: Optional          
    connectionDetails:
    - fromConnectionSecretKey: username
    - fromConnectionSecretKey: password
    - name: hostname
      fromConnectionSecretKey: endpoint
    - type: FromValue
      name: port
      value: "5432"
    readinessChecks:
    - type: MatchString
      fieldPath: "status.atProvider.dbInstanceStatus"
      matchString: "available"
  writeConnectionSecretsToNamespace: crossplane-system